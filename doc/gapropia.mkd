@ 3. Desarrollo @

El problema a desarrollar es el de tratar de encontrar la mejor red neuronal
que solucione el problema de aproximación de una serie temporal.

Para representar nuestro problema, cada individuo estaba conformado por la matriz de pesos
correspondiente a una red neuronal, mientras que el valor de cada locus de su codificación
equivalía a un peso particular.

La función de adaptación para este problema era el Error Cuadrático Medio obtenido al evaluar la red.

El error cuadrático medio es cálculado como se puede ver en la **Figura 1** en donde la resta equivale 
a la resta entre el valor esperado y el obtenido para cada patrón.

A las operaciones habituales de un algoritmo genético (entrecruzamiento y mutación) se
agregó la posibilidad de aplicar una cantidad de pasos del algoritmo de **backpropagation** a un individuo.

Para poder evaluar el problema se prefijaron ciertos elementos de la red neuronal
en base a una buena ejecución de la misma. Estos fueron:

* __Estructura de la red__: [2 9 8 1]
* __Momentum__: 0.3
* __Parametros Adaptativos__: 0.1 para los incrementos del Learning Rate y 0.001 para los decrementos,
0.001 es considerado como la cota para evaluar si una iteración es buena, mala o neutral y
2 pasos buenos son considerados para aumentar el Learning Rate
* __Learning Rate__: 0.4
* __Rollbacks__: Activados
* __Función de activación__: Sigmoidea lógica
* __Beta__: 1
* __Patrones utilizados para el aprendizaje__: 300

Con esta configuración originalmente se pudo obtener un error de 0.0003756

Dentro de nuestra implementación existe la posibilidad de configurar los siguientes parámetros
para el algoritmo genético:

* __Cantidad de individuos en la población__
* __Criterios de corte__: Se puede definir una cantidad máxima de generaciones,
una cota mínima para el grado de adaptación de los individuos,
un porcentaje para el cual se considera que la población no ha sido modificada
siginificativamente entre generaciones y una cantidad de generaciones en las cuales
se espera que las soluciones hayan mejorado
* __Mutaciones a los individuos__: Se cuenta con una probabilidad de mutación
donde la misma puede ser de dos tipos: mutando con una misma probabilidad cada locus o
mutando algún locus elegido al azar con otra probabilidad. Así mismo, dichas probabilidades
pueden ser constantes durante las generaciones (clásica) o reducirse con el paso
de las mismas (no uniforme)
* __Entrecruzamientos entre individuos__: Se cuenta con una probabilidad de entrecruzamiento,
pudiéndose elegir el método de entrecruzamiento entre individuos entre:
cruce de un punto, cruce de dos puntos, cruce uniforme parametrizado y anular
* __Backpropagation__: Es posible configurar una probabilidad de ejecución
del algoritmo de backpropagation sobre un individuo. Así mismo, es posible configurar
cuántas iteraciones del mismo se realizarán
* __Métodos de reemplazo__: Es posible configurar cuál de los tres métodos de reemplazo
dados por la cátedra será utilizado. Para los métodos que lo necesiten,
también se puede configurar la brecha generacional
* __Métodos de selección__: Es posible configurar cuál será el método de selección a utilizar
entre ruleta, universal, elitismo, ranking, Boltzmann, torneos, mixto 1 (elitismo y ruleta)
y mixto 2 (elitismo y universal).

